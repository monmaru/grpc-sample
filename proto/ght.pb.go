// Code generated by protoc-gen-go.
// source: ght.proto
// DO NOT EDIT!

/*
Package ght is a generated protocol buffer package.

It is generated from these files:
	ght.proto

It has these top-level messages:
	Req
	Res
	Repository
	Star
*/
package ght

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the language name.
type Req struct {
	Lang string `protobuf:"bytes,1,opt,name=lang" json:"lang,omitempty"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Req) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

// The response message containing the repositories.
type Res struct {
	Repositories []*Repository `protobuf:"bytes,1,rep,name=repositories" json:"repositories,omitempty"`
}

func (m *Res) Reset()                    { *m = Res{} }
func (m *Res) String() string            { return proto.CompactTextString(m) }
func (*Res) ProtoMessage()               {}
func (*Res) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Res) GetRepositories() []*Repository {
	if m != nil {
		return m.Repositories
	}
	return nil
}

type Repository struct {
	Rank        int32  `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	Owner       string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Url         string `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Lang        string `protobuf:"bytes,6,opt,name=lang" json:"lang,omitempty"`
	Star        *Star  `protobuf:"bytes,7,opt,name=star" json:"star,omitempty"`
}

func (m *Repository) Reset()                    { *m = Repository{} }
func (m *Repository) String() string            { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()               {}
func (*Repository) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Repository) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *Repository) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Repository) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Repository) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Repository) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Repository) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *Repository) GetStar() *Star {
	if m != nil {
		return m.Star
	}
	return nil
}

type Star struct {
	Today int32 `protobuf:"varint,1,opt,name=today" json:"today,omitempty"`
	Total int32 `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *Star) Reset()                    { *m = Star{} }
func (m *Star) String() string            { return proto.CompactTextString(m) }
func (*Star) ProtoMessage()               {}
func (*Star) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Star) GetToday() int32 {
	if m != nil {
		return m.Today
	}
	return 0
}

func (m *Star) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*Req)(nil), "ght.Req")
	proto.RegisterType((*Res)(nil), "ght.Res")
	proto.RegisterType((*Repository)(nil), "ght.Repository")
	proto.RegisterType((*Star)(nil), "ght.Star")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GithubTrending service

type GithubTrendingClient interface {
	// Sends a repositories.
	Fetch(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
}

type githubTrendingClient struct {
	cc *grpc.ClientConn
}

func NewGithubTrendingClient(cc *grpc.ClientConn) GithubTrendingClient {
	return &githubTrendingClient{cc}
}

func (c *githubTrendingClient) Fetch(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := grpc.Invoke(ctx, "/ght.GithubTrending/Fetch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GithubTrending service

type GithubTrendingServer interface {
	// Sends a repositories.
	Fetch(context.Context, *Req) (*Res, error)
}

func RegisterGithubTrendingServer(s *grpc.Server, srv GithubTrendingServer) {
	s.RegisterService(&_GithubTrending_serviceDesc, srv)
}

func _GithubTrending_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubTrendingServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ght.GithubTrending/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubTrendingServer).Fetch(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _GithubTrending_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ght.GithubTrending",
	HandlerType: (*GithubTrendingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _GithubTrending_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ght.proto",
}

func init() { proto.RegisterFile("ght.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4e, 0xc3, 0x30,
	0x10, 0x45, 0x15, 0x92, 0x14, 0x32, 0x41, 0x80, 0x2c, 0x16, 0x06, 0x84, 0x14, 0x65, 0x95, 0x0d,
	0x5d, 0xa4, 0x3b, 0x0e, 0x00, 0x7b, 0xc3, 0x05, 0xdc, 0xc6, 0x4a, 0x2c, 0x22, 0x3b, 0x1d, 0x4f,
	0x85, 0x7a, 0x2e, 0x2e, 0x88, 0x3c, 0x69, 0x29, 0xdd, 0xfd, 0xff, 0xbe, 0x35, 0x9e, 0x3f, 0x50,
	0xf4, 0x03, 0x2d, 0x27, 0xf4, 0xe4, 0x45, 0xda, 0x0f, 0x54, 0x3f, 0x40, 0xaa, 0xcc, 0x56, 0x08,
	0xc8, 0x46, 0xed, 0x7a, 0x99, 0x54, 0x49, 0x53, 0x28, 0xd6, 0xf5, 0x6b, 0x8c, 0x82, 0x58, 0xc1,
	0x35, 0x9a, 0xc9, 0x07, 0x4b, 0x1e, 0xad, 0x09, 0x32, 0xa9, 0xd2, 0xa6, 0x6c, 0x6f, 0x97, 0x71,
	0x90, 0x3a, 0x06, 0x7b, 0x75, 0xf6, 0xa8, 0xfe, 0x49, 0x00, 0x4e, 0x61, 0x1c, 0x8f, 0xda, 0x7d,
	0xf1, 0xf8, 0x5c, 0xb1, 0x16, 0xf7, 0x90, 0xfb, 0x6f, 0x67, 0x50, 0x5e, 0xf0, 0x9f, 0xb3, 0x89,
	0x94, 0x2c, 0x8d, 0x46, 0xa6, 0x33, 0x65, 0x23, 0xee, 0x20, 0xdd, 0xe1, 0x28, 0x33, 0x66, 0x51,
	0x8a, 0x0a, 0xca, 0xce, 0x84, 0x0d, 0xda, 0x89, 0xac, 0x77, 0x32, 0xe7, 0xe4, 0x3f, 0xfa, 0xab,
	0xb4, 0x38, 0x55, 0x12, 0xcf, 0x90, 0x05, 0xd2, 0x28, 0x2f, 0xab, 0xa4, 0x29, 0xdb, 0x82, 0x3b,
	0x7c, 0x90, 0x46, 0xc5, 0xb8, 0x6e, 0x21, 0x8b, 0x8e, 0x97, 0xf0, 0x9d, 0xde, 0x1f, 0xf6, 0x9d,
	0xcd, 0x4c, 0x49, 0x8f, 0xbc, 0x30, 0x53, 0xd2, 0x63, 0xfb, 0x02, 0x37, 0xef, 0x96, 0x86, 0xdd,
	0xfa, 0x13, 0x8d, 0xeb, 0xac, 0xeb, 0xc5, 0x13, 0xe4, 0x6f, 0x86, 0x36, 0x83, 0xb8, 0x3a, 0xdc,
	0x68, 0xfb, 0x78, 0x54, 0x61, 0xbd, 0xe0, 0xdb, 0xaf, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0xea,
	0xf6, 0x8a, 0x56, 0x88, 0x01, 0x00, 0x00,
}
